(()=>{"use strict";class t{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.body;this.container=t,this.sample=null}static markUP(){return'<div class="popup__body">\n    <div class="popup__content">\n     <h3 class="popup__title add">Добавить тикет</h3>\n     <h3 class="popup__title change">Изменить тикет</h3>\n      <form name="adding" class="popup__form" novalidate="">\n        <label class="popup__label">\n          <div class="popup__name">Краткое описание</div>\n          <input name="title" id="title" type="text" class="popup__input" required="">\n        </label>\n        <label class="popup__label">\n          <div class="popup__name">Подробное описание</div>\n          <textarea name="description" id="description" type="text" class="popup__input"></textarea>\n        </label>\n        <div class="popup__buttons">\n          <button name="save" data-name="save" class="button">Добавить</button>\n          <button name="change" data-name="change" class="button">Редактировать</button>\n          <button name="cancel" data-name="cancel" class="button">Отмена</button>\n        </div>\n      </form>\n    </div>\n  </div>'}creat(){this.sample=document.createElement("div"),this.sample.className="popup",this.sample.setAttribute("id","popup"),this.sample.innerHTML=t.markUP(),this.container.appendChild(this.sample)}showAdding(){this.sample.classList.add("open"),this.sample.querySelector('.button[data-name="save"]').className="button",this.sample.querySelector('.button[data-name="change"]').className="button d_none",this.sample.querySelector(".popup__title.change").className="popup__title change d_none",this.sample.querySelector(".popup__title.add").className="popup__title add"}showUpdate(){this.sample.classList.add("open"),this.sample.querySelector('.button[data-name="save"]').className="button d_none",this.sample.querySelector('.button[data-name="change"]').className="button",this.sample.querySelector(".popup__title.change").className="popup__title change",this.sample.querySelector(".popup__title.add").className="popup__title add d_none"}hide(){this.sample.classList.remove("open")}}class e{constructor(){this.options=null,this.baseURL="https://ahj-7-1-http-sergius.herokuapp.com/"}createTicket(t,e){const i=new FormData;return Array.from(t.elements).filter((t=>"title"===t.name||"description"===t.name)).forEach((t=>{i.append(t.name,`${t.value}`)})),this.options={method:"POST",query:"method=createTicket",data:i},this.createRequest(this.options,e)}getAllTickets(t){return this.options={method:"GET",query:"method=allTickets",data:null},this.createRequest(this.options,t)}changeStatus(t,e){return this.options={method:"GET",query:`method=changeStatus&id=${t}`,data:null},this.createRequest(this.options,e)}getTicketById(t,e){return this.options={method:"GET",query:`method=ticketById&id=${t}`,data:null},this.createRequest(this.options,e)}editTicket(t,e,i){const s=new FormData;Array.from(e.elements).filter((t=>"title"===t.name||"description"===t.name)).forEach((t=>{s.append(t.name,`${t.value}`)})),s.append("id",t),this.options={method:"POST",query:"method=editTicket",data:s},this.createRequest(this.options,i)}deleteTicket(t,e){return this.options={method:"GET",query:`method=deleteTicket&id=${t}`,data:null},this.createRequest(this.options,e)}createRequest(t,e){const i=new XMLHttpRequest,s=`${this.baseURL}?${t.query}`;i.open(t.method,s),i.addEventListener("load",(()=>{if(i.status>=200&&i.status<300)try{const t=JSON.parse(i.responseText);e(t)}catch(t){console.error(t)}})),i.send(t.data)}}class i{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.body;this.container=t,this.list=[]}static markUP(t,e,i){return`<div class="popup__body">\n      <div class="popup__content">\n      <h3 class="popup__title">Удалить тикет</h3>\n        <div class="popup__title">${t}</div>\n        <div class="popup__buttons">\n          <button data-name="yes" class="button">${e}</button>\n          <button data-name="no" class="button">${i}</button>\n        </div>\n      </div>\n    </div>`}getPopup(t){return this.list.find((e=>e.dataset.id===t))||null}showPopup(t){this.getPopup(t).classList.add("open")}hidePopup(t){this.getPopup(t).classList.remove("open")}creat(t,e,s,n){const a=document.createElement("div");a.className="popup",a.setAttribute("id","confirm"),a.dataset.id=n,a.innerHTML=i.markUP(t,e,s),this.list.push(a),this.container.appendChild(a)}delete(t){const e=this.list.findIndex((e=>e.dataset.id===t));this.list[e].remove(),this.list.splice(e,1)}}class s{constructor(){this.list=[]}static markup(t){return`<div class="tooltip__content">\n              <div class="tooltip__text">${t}</div>\n            </div>\n            <div class="tooltip__arrow"></div>`}getId(){const t=Math.floor(1e7*Math.random());return this.list.find((e=>e.dataset.id===t))?this.getId():t}creatTooltip(t,e){const i=this.getId(),n=document.createElement("div");if(n.dataset.id=i,n.className="tooltip",n.innerHTML=s.markup(t),this.list.push(n),document.body.appendChild(n),e){const{bottom:t,left:i}=e.getBoundingClientRect();n.style.top=`${t+10}px`,n.style.left=`${i+110}px`}}removeToolTip(t){const e=this.list.findIndex((e=>e.dataset.id===t));-1!==e&&(this.list[e].remove(),this.list.splice(e,1))}}class n{constructor(){this.container=null,this.listTickets=null,this.form=null,this.titleField=null,this.descripField=null,this.addButton=null,this.addChangePopup=new t,this.confirmPopup=new i,this.tooltip=new s,this.quantity=null,this.curId=null,this.curTooltipID=null,this.api=new e,this.description=null}init(){this.drawUI(),this.toAppoint()}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}static get startMarkUp(){return'<div class="page">\n           <div class="page__body">\n             <div class="page__content">\n               <table class="page__table table">\n                 <caption class="page__title">Тикеты<span class="page__button">Добавить тикет</span></caption>\n                 <thead class="table__head">\n                   <tr>\n                     <th>Статус</th>\n                     <th>Наименование </th>\n                     <th>Дата</th>\n                     <th>Действия</th>\n                   </tr>\n                 </thead>\n                 <tbody class="table__body"></tbody>\n                 <tfoot class="table__footer">\n                   <tr>\n                     <th scope="row" colspan="2">Всего тикетов:</th>\n                     <th class="quantity" colspan="1">0</th>\n                   </tr>\n                 </tfoot>\n               </table>\n             </div>\n           </div>\n         </div>'}drawUI(){this.checkBinding(),this.container.innerHTML=n.startMarkUp,this.listTickets=this.container.querySelector(".table__body"),this.api.getAllTickets(this.redrawTickets.bind(this)),this.addChangePopup.creat(),this.form=document.forms.adding,this.titleField=this.form.title,this.descripField=this.form.description,this.addButton=this.container.querySelector(".page__button"),this.confirmPopup.creat("Вы уверены, что хотите удалить этот тикет? Это действие необратимо.","Удалить","Отменить","confirmDel"),this.quantity=this.container.querySelector(".quantity")}toAppoint(){this.addButton.addEventListener("click",(()=>{this.addChangePopup.showAdding()})),this.form.addEventListener("submit",(t=>this.onSubmit(t))),this.form.elements[0].addEventListener("change",(()=>this.onChange())),this.listTickets.addEventListener("click",(t=>this.onActionsClick(t))),this.addChangePopup.sample.addEventListener("click",(t=>this.onPopupClick(t))),this.confirmPopup.getPopup("confirmDel").addEventListener("click",(t=>this.onConfirmPopupClick(t)))}onChange(){this.form.elements[0].validity.valid&&this.tooltip.removeToolTip(this.curTooltipID)}onConfirmPopupClick(t){"yes"===t.target.dataset.name&&(this.api.deleteTicket(this.curId,this.redrawTickets.bind(this)),this.confirmPopup.hidePopup("confirmDel")),"no"===t.target.dataset.name&&this.confirmPopup.hidePopup("confirmDel")}onPopupClick(t){"cancel"===t.target.dataset.name&&(t.preventDefault(),this.hideAddChangePopup()),"save"===t.target.dataset.name&&this.checkValidity(t)&&(this.api.createTicket(this.form,this.redrawTickets.bind(this)),this.hideAddChangePopup()),"change"===t.target.dataset.name&&this.checkValidity(t)&&(this.api.editTicket(this.curId,this.form,this.redrawTickets.bind(this)),this.hideAddChangePopup())}onActionsClick(t){"editing"===t.target.dataset.name&&(this.curId=t.target.closest("tr").id,this.addChangePopup.showUpdate(),this.api.getTicketById(this.curId,(t=>{t&&(this.titleField.value=t.name,this.descripField.value=t.description)}))),"delete"===t.target.dataset.name&&(this.curId=t.target.closest("tr").id,this.confirmPopup.showPopup("confirmDel")),"status"===t.target.dataset.name&&(this.curId=t.target.closest("tr").id,this.api.changeStatus(this.curId,(e=>{e.success&&t.target.classList.toggle("checked")}))),"name"===t.target.dataset.name&&(this.curId=t.target.closest("tr").id,this.api.getTicketById(this.curId,(e=>{e&&(this.description=t.target.querySelector('[data-name="description"]'),this.description.classList.toggle("d_none"),this.description.textContent=e.description)})))}checkValidity(t){t.preventDefault();const e=[...this.form.elements].find((t=>!t.validity.valid));return!e||(e.focus(),this.tooltip.removeToolTip(this.curTooltipID),this.tooltip.creatTooltip("Заполните пожалуйста это поле",e),this.curTooltipID=document.body.lastElementChild.dataset.id,!1)}onSubmit(t){this.checkValidity(t)}redrawTickets(t){this.listTickets.innerHTML="",t.forEach((t=>{this.listTickets.insertAdjacentHTML("beforeend",`<tr id="${t.id}">\n      <td>\n        <div data-name="status" class="td_item status"></div>\n      </td>\n      <td data-name="name" class="td_item">\n        ${t.name}\n        <div data-name="description" class="description d_none" ></div>\n      </td>\n      <td data-name="date"><div class="td_content">${this.cleanDate(t.created)}</div></td>\n      <td>\n        <div class="td_content"><span class="editing" data-name="editing"></span><span class="delete" data-name="delete"></span></div>\n      </td>\n    </tr>`);const e=document.querySelector(`[id="${t.id}"] [data-name="status"]`);t.status&&e.classList.add("checked")})),this.quantity.textContent=t.length}cleanDate(t){const e=t.split(" ");return this.date=[e[0].slice(0,-1),e[1]].join(" "),this.date}hideAddChangePopup(){this.tooltip.removeToolTip(this.curTooltipID),this.addChangePopup.hide(),this.form.reset()}checkBinding(){if(null===this.container)throw new Error("ListEditor is not bind to DOM")}}const a=new n;a.bindToDOM(document.getElementById("root")),a.init()})();